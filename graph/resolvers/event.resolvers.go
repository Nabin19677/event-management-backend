package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"

	"github.io/anilk/crane/graph"
	"github.io/anilk/crane/models"
)

// AdminUserID is the resolver for the adminUserId field.
func (r *eventResolver) AdminUserID(ctx context.Context, obj *models.Event) (*models.User, error) {
	user, err := r.UserRepository.FindByID(obj.AdminUserID)

	if err != nil {
		return nil, err
	}

	return user, nil
}

// Events is the resolver for the events field.
func (r *queryResolver) Events(ctx context.Context) ([]*models.Event, error) {
	events, err := r.EventRepository.Find()
	if err != nil {
		return nil, err
	}
	return events, nil
}

// CreateEvent is the resolver for the createEvent field.
func (r *mutationResolver) CreateEvent(ctx context.Context, input models.NewEvent) (bool, error) {
	event, err := r.EventRepository.Insert(input)
	if err != nil {
		return false, err
	}
	return event, nil
}

// Event returns graph.EventResolver implementation.
func (r *Resolver) Event() graph.EventResolver { return &eventResolver{r} }

type eventResolver struct{ *Resolver }
