package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"

	"github.io/anilk/crane/graph"
	"github.io/anilk/crane/models"
)

// EventID is the resolver for the eventId field.
func (r *eventExpenseResolver) EventID(ctx context.Context, obj *models.EventExpense) (*models.Event, error) {
	event, err := r.EventRepository.FindByID(obj.EventID)

	if err != nil {
		return nil, err
	}

	return event, nil
}

// GetEventExpensesByCategory is the resolver for the getEventExpensesByCategory field.
func (r *queryResolver) GetEventExpensesByCategory(ctx context.Context, eventID int) ([]*models.CategoryTotal, error) {
	totalExpenses, _ := r.EventExpenseRepository.GetTotalExpensesByCategory(eventID)

	return totalExpenses, nil
}

// EventExpense returns graph.EventExpenseResolver implementation.
func (r *Resolver) EventExpense() graph.EventExpenseResolver { return &eventExpenseResolver{r} }

type eventExpenseResolver struct{ *Resolver }
