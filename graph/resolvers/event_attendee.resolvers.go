package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"

	"github.io/anilk/crane/graph"
	"github.io/anilk/crane/lib/validation"
	"github.io/anilk/crane/models"
)

// EventID is the resolver for the eventId field.
func (r *eventAttendeeResolver) EventID(ctx context.Context, obj *models.EventAttendee) (*models.Event, error) {
	event, err := r.EventRepository.FindByID(obj.EventID)

	if err != nil {
		return nil, err
	}

	return event, nil
}

// UserID is the resolver for the userId field.
func (r *eventAttendeeResolver) UserID(ctx context.Context, obj *models.EventAttendee) (*models.PublicUser, error) {
	user, err := r.UserRepository.FindByIDPublic(obj.UserID)

	if err != nil {
		return nil, err
	}

	return user, nil
}

// CreateEventAttendee is the resolver for the createEventAttendee field.
func (r *mutationResolver) CreateEventAttendee(ctx context.Context, eventID int, input models.NewEventAttendee) (bool, error) {
	if err := validation.ValidateStruct(input); err != nil {
		return false, err
	}

	_, err := r.EventAttendeeRepository.Insert(input)
	if err != nil {
		return false, err
	}
	return true, nil
}

// GetEventAttendees is the resolver for the getEventAttendees field.
func (r *queryResolver) GetEventAttendees(ctx context.Context, eventID int) ([]*models.EventAttendee, error) {
	eventAttendees, err := r.EventAttendeeRepository.FindAllByEventId(eventID)
	if err != nil {
		return nil, err
	}
	return eventAttendees, nil
}

// EventAttendee returns graph.EventAttendeeResolver implementation.
func (r *Resolver) EventAttendee() graph.EventAttendeeResolver { return &eventAttendeeResolver{r} }

type eventAttendeeResolver struct{ *Resolver }
