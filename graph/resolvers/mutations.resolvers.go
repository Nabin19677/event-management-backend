package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.38

import (
	"context"

	"github.io/anilk/crane/graph"
	"github.io/anilk/crane/models"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input models.NewUser) (bool, error) {
	user, err := r.UserRepository.Insert(input)
	if err != nil {
		return false, err
	}
	return user, nil
}

// CreateEvent is the resolver for the createEvent field.
func (r *mutationResolver) CreateEvent(ctx context.Context, input models.NewEvent) (bool, error) {
	event, err := r.EventRepository.Insert(input)
	if err != nil {
		return false, err
	}
	return event, nil
}

// CreateEventOrganizer is the resolver for the createEventOrganizer field.
func (r *mutationResolver) CreateEventOrganizer(ctx context.Context, input models.NewEventOrganizer) (bool, error) {
	event, err := r.EventOrganizersRepository.Insert(input)
	if err != nil {
		return false, err
	}
	return event, nil
}

// DeleteEventOrganizer is the resolver for the deleteEventOrganizer field.
func (r *mutationResolver) DeleteEventOrganizer(ctx context.Context, eventOrganizerID int) (bool, error) {
	isDeleted, err := r.EventOrganizersRepository.Delete(eventOrganizerID)
	if err != nil {
		return false, err
	}
	return isDeleted, nil
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
